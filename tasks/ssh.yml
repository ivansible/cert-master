---
- name: ensure that .ssh directory exists
  file:
    path: ~/.ssh
    state: directory
    mode: 0700

- name: verify that ssh keys are configured
  assert:
    that: "certbot_replica_ssh_keys | length > 0"
    msg: "access keys not found!"

- name: install ssh keys
  copy:
    src: "{{ item }}"
    dest: ~/.ssh/
    mode: 0400
  loop: "{{ certbot_replica_ssh_keys }}"
  loop_control:
    label: "{{ item | basename }}"

- name: print list of active replica hosts
  debug:
    msg: "Replicas: {{ certbot_master_replica_hosts |join(' ') }}"

- name: refresh replica facts for certbot replicas
  setup:
  become: false
  delegate_to: "{{ item }}"
  delegate_facts: true
  loop: "{{ certbot_master_replica_hosts }}"

- name: configure ssh aliases for certbot replicas
  blockinfile:
    path: ~/.ssh/config
    create: true
    mode: 0600
    block: |
      Host {{ replica }}.certbot-replica
        Hostname {{ replica_vars.ansible_host }}
        Port {{ replica_vars.ansible_port }}
        User {{ replica_vars.certbot_replica_user
              | default(replica_vars.ansible_user_id)
              | default(ansible_user_id) }}
        IdentityFile {{ ssh_key_file }}
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
        LogLevel ERROR
    marker: "# == {mark} certbot replica - {{ replica }} =="
    # insert before any "glob overriding" entries
    insertbefore: '^Host .*[*]'
  vars:
    replica_vars: "{{ hostvars[replica] }}"
    ssh_key_file: "~/.ssh/{{ certbot_replica_ssh_keys |first |basename }}"
  loop: "{{ certbot_master_replica_hosts }}"
  loop_control:
    loop_var: replica
...
